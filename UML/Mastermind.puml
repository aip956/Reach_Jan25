@startuml
skinparam classAttributeIconSize 0

' Main Class
class MyMastermind {
    + main(String[]): void
}

' View
class GameUI {
    + displayMessage(String): void
    + close(): void
}

' Utils
class ValidationUtils {
    {static} + VALID_GUESS_PATTERN: String
}

' Models
class Game {
    - List<Guesser> players
    - GameUI gameUI
    - String secretCode
    - List<String> guesses
    - boolean solved
    - GameDataDAO gameDataDAO
    + startGame(): void
    + provideFeedback(Player, String): String
    + finalizeGameData(): void
}

abstract class Player {
    # String playerName
    + getPlayerName(): String
    {abstract} + makeGuess(): String
}

class Guesser {
    - List<String> guesses
    - PlayerLevel level
    + makeGuess(): String
    + getGuesses(): List<String>
}

class PlayerLevel {
    - int maxAttempts
    - boolean showDetailedFb
    + getMaxAttempts(): int
    + isShowDetailedFb(): boolean
}

class SecretKeeper {
    - String secretCode
    + getSecretCode(): String
}

' DAO
interface GameDataDAO {
    + saveGameData(Game): void
}

class SQLiteGameDataDAO {
    - String dbPath
    + saveGameData(Game): void
}

class DAOFactory {
    + createGameDataDAO(String, String): GameDataDAO
}

' DB Connection
class DatabaseConnectionManager {
    + getConnection(String): Connection
    + closeConnection(): void
}

' Controller
class GameSetup {
    + setupPlayers(GameDataDAO, String[]): List<Guesser>
}

' Relationships
MyMastermind --> GameSetup : uses
MyMastermind --> Game : starts
Game --> Guesser : uses
Game --> SecretKeeper : uses
Game --> GameUI : uses
Game --> GameDataDAO : stores data
Game ..> ValidationUtils : uses
SecretKeeper ..> ValidationUtils : uses
Guesser ..> PlayerLevel : configures
Player <|-- Guesser
GameDataDAO <|.. SQLiteGameDataDAO : implements
DAOFactory --> GameDataDAO : creates
SQLiteGameDataDAO ..> DatabaseConnectionManager : depends on

@enduml
